<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.nuguna.freview.store.mapper.StoreMyBrandMapper">

  <select id="getRecentMojipPostsCount" resultType="java.lang.Integer">
    select count(*)
    from post p
    where p.user_seq = #{storeSeq}
      and p.code in ('모집')
      and p.apply_end_date > now()
  </select>

  <resultMap id="storeRecentMojipPostInfoMap"
    type="com.nuguna.freview.store.dto.response.StoreRecentMojipPostInfoDTO">
    <id property="seq" column="seq"/>
    <result property="title" column="title"/>
    <result property="createdAt" column="created_at"/>
  </resultMap>

  <select id="getStoreRecentMojipPosts" resultMap="storeRecentMojipPostInfoMap">
    select p.seq,
           p.title,
           p.created_at
    from post p
    where p.user_seq = #{storeSeq}
      and p.code in ('모집')
      and p.apply_end_date > now()
    limit #{pageSize} offset #{offset}
  </select>

  <!-- 스토어 마이 브랜딩에서는 UNWRITTEN, WRITTEN, NOSHOW, STORE_HIDDEN의 정보들을 모두 볼 수 있다. -->
  <select id="getStoreReviewsCount" resultType="java.lang.Integer">
    select count(*)
    from review r
    where r.store_seq = #{storeSeq}
      and r.status in ('UNWRITTEN', 'WRITTEN', 'NOSHOW', 'STORE_HIDDEN')
  </select>

  <resultMap id="storeReviewLogInfoMap"
    type="com.nuguna.freview.store.dto.response.StoreReviewLogInfoDTO">
    <id property="seq" column="seq"/>
    <result property="customerSeq" column="customer_seq"/>
    <result property="customerNickname" column="nickname"/>
    <result property="status" column="status"/>
    <result property="url" column="url"/>
    <result property="visitDate" column="visit_date"/>
    <result property="createdAt" column="created_at"/>
  </resultMap>

  <select id="getStoreReviewInfos" resultMap="storeReviewLogInfoMap">
    select store_all_reviews.seq,
           store_all_reviews.customer_seq,
           u.nickname,
           store_all_reviews.status,
           store_all_reviews.url,
           e.visit_date,
           store_all_reviews.created_at
    from (select r.seq,
                 r.experience_seq,
                 r.customer_seq,
                 r.status,
                 r.url,
                 r.created_at
          from review r
          where r.store_seq = #{storeSeq}
            and status in ('UNWRITTEN', 'WRITTEN', 'NOSHOW', 'STORE_HIDDEN')) store_all_reviews
           inner join
         user u
         on
           store_all_reviews.customer_seq = u.seq
           inner join
         experience e
         on
           store_all_reviews.experience_seq = e.seq
    limit #{pageSize} offset #{offset}
  </select>


  <update id="updateProfilePhotoUrl">
    update user
    set profile_photo_url = #{profilePhotoUrl}
    where seq = #{storeSeq}
  </update>

  <update id="updateStoreIntroduce">
    update user
    set introduce = #{toIntroduce}
    where seq = #{storeSeq}
  </update>

  <delete id="deleteFoodTypesByUserSeq">
    delete
    from user_food_type
    where user_seq = #{storeSeq}
  </delete>

  <insert id="insertFoodTypes">
    insert into user_food_type (user_seq, food_type_seq)
    select
    #{storeSeq}, seq
    from
    food_type
    where
    dish in
    <foreach item="item" index="index" collection="toFoodTypes" open="(" separator="," close=")">
      #{item}
    </foreach>
  </insert>

  <delete id="deleteTagsByUserSeq">
    delete
    from user_tag
    where user_seq = #{storeSeq}
  </delete>

  <insert id="insertTags">
    insert into user_tag (user_seq, tag_seq)
    select
    #{storeSeq}, seq
    from
    tag
    where
    name in
    <foreach item="item" index="index" collection="toTags" open="(" separator="," close=")">
      #{item}
    </foreach>
  </insert>

  <update id="updateStoreLocation">
    update user u
    set u.store_location = #{toStoreLocation}
    where u.seq = #{storeSeq}
      and u.code = 'STORE'
  </update>


</mapper>