<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.nuguna.freview.common.mapper.UserMapper">

  <resultMap id="userMap" type="com.nuguna.freview.common.vo.user.UserVO">
    <id property="seq" column="seq"/>
    <result property="businessNumber" column="business_number"/>
    <result property="code" column="code"/>
    <result property="email" column="email"/>
    <result property="password" column="password"/>
    <result property="nickname" column="nickname"/>
    <result property="profilePhotoUrl" column="profile_photo_url"/>
    <result property="introduce" column="introduce"/>
    <result property="subEmail" column="sub_email"/>
    <result property="loginType" column="login_type"/>
    <result property="isWithDrawn" column="is_withdrawn"/>
    <result property="ageGroup" column="age_group"/>
    <result property="storeLocation" column="store_location"/>
    <result property="createdAt" column="created_at"/>
    <result property="updatedAt" column="updated_at"/>
  </resultMap>

  <resultMap id="personalizedUserResultMap" type="com.nuguna.freview.common.dto.personalizedUserResultMap">
    <id property="userSeq" column="seq" />
    <result property="nickname" column="nickname" />
    <result property="email" column="email" />
    <result property="profilePhotoUrl" column="profile_photo_url" />
    <result property="foodTypeWord" column="food_types" />
    <result property="tagWord" column="tags" />
  </resultMap>

  <insert id="insertCustomer" parameterType="com.nuguna.freview.common.vo.user.UserVO">
    insert into freview2.user(business_number, code, email, password, nickname, profile_photo_url,
                     sub_email, login_type, is_withdrawn, age_group, store_location,
                     created_at, updated_at)
    values (null, #{code}, #{email}, #{password}, #{nickname}, null,
            #{subEmail}, #{loginType}, false, #{ageGroup},
            null, NOW(), NOW())
  </insert>

  <select id="selectUser" parameterType="Long" resultMap="userMap">
    select
      seq, business_number, code, email, password, nickname, profile_photo_url, introduce, sub_email, login_type, is_withdrawn, age_group, store_location, created_at, updated_at
    from user
    where seq = #{userSeq}
  </select>

  <select id="findByDish" parameterType="string" resultMap="personalizedUserResultMap">
    SELECT u.seq, u.nickname, u.email, u.profile_photo_url,
           GROUP_CONCAT(DISTINCT ft.dish) AS food_types,
           GROUP_CONCAT(DISTINCT t.name) AS tags
    FROM user u
           LEFT JOIN user_food_type uft ON u.seq = uft.user_seq
           LEFT JOIN food_type ft ON uft.food_type_seq = ft.seq
           LEFT JOIN user_tag ut ON u.seq = ut.user_seq
           LEFT JOIN tag t ON ut.tag_seq = t.seq
    WHERE ft.dish = #{dish}
    GROUP BY u.seq, u.nickname, u.email, u.profile_photo_url
    ORDER BY RAND()
  </select>

  <select id="findByCategoryExcludingDish" parameterType="map" resultMap="personalizedUserResultMap">
    SELECT u.seq, u.nickname, u.email, u.profile_photo_url,
           GROUP_CONCAT(DISTINCT ft.dish) AS food_types,
           GROUP_CONCAT(DISTINCT t.name) AS tags
    FROM user u
           LEFT JOIN user_food_type uft ON u.seq = uft.user_seq
           LEFT JOIN food_type ft ON uft.food_type_seq = ft.seq
           LEFT JOIN user_tag ut ON u.seq = ut.user_seq
           LEFT JOIN tag t ON ut.tag_seq = t.seq
    WHERE ft.code = #{category} AND ft.dish != #{dish}
    GROUP BY u.seq, u.nickname, u.email, u.profile_photo_url
    ORDER BY RAND()
  </select>


  <select id="findRandomUsers" parameterType="int" resultMap="personalizedUserResultMap">
    SELECT u.seq, u.nickname, u.email, u.profile_photo_url,
           GROUP_CONCAT(DISTINCT ft.dish) AS food_types,
           GROUP_CONCAT(DISTINCT t.name) AS tags
    FROM user u
           LEFT JOIN user_food_type uft ON u.seq = uft.user_seq
           LEFT JOIN food_type ft ON uft.food_type_seq = ft.seq
           LEFT JOIN user_tag ut ON u.seq = ut.user_seq
           LEFT JOIN tag t ON ut.tag_seq = t.seq
    GROUP BY u.seq, u.nickname, u.email, u.profile_photo_url
    ORDER BY RAND() LIMIT #{limit}
  </select>

</mapper>

